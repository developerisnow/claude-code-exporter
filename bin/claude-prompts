#!/usr/bin/env node

const ClaudePromptExporter = require('../lib/index');
const path = require('path');
const fs = require('fs');

const HELP_TEXT = `
Claude Code Prompt Exporter v${ClaudePromptExporter.getVersion()}

Export your Claude Code session prompts to markdown files.

USAGE:
  claude-prompts [options] [project-path] [output-dir]

ARGUMENTS:
  project-path    Path to your project (default: current directory)
  output-dir      Output directory for markdown files (default: ./claude-prompts)

OPTIONS:
  -h, --help         Show this help message
  -v, --version      Show version number
  -V, --verbose      Enable verbose output
  --list             List available sessions without exporting
  --full             Export full conversations (all messages)
  --outputs-only     Export only assistant outputs
  --claude-home DIR  Specify Claude home directory (default: auto-detect)

EXAMPLES:
  claude-prompts                              # Export user prompts (default)
  claude-prompts --full /path/to/project     # Export full conversations
  claude-prompts --outputs-only ./exports    # Export only assistant outputs
  claude-prompts . ./exports                 # Export to custom directory
  claude-prompts --list /path/to/project     # List sessions only
  claude-prompts -V /path/to/project         # Verbose output
  claude-prompts --claude-home ~/.config/claude /path/to/project

For more information, visit: https://github.com/yourusername/claude-code-exporter
`;

function parseArgs(args) {
  const options = {
    help: false,
    version: false,
    verbose: false,
    list: false,
    full: false,
    outputsOnly: false,
    claudeHome: null,
    projectPath: process.cwd(),
    outputDir: './claude-prompts'
  };

  const positionalArgs = [];

  for (let i = 0; i < args.length; i++) {
    const arg = args[i];

    if (arg === '-h' || arg === '--help') {
      options.help = true;
    } else if (arg === '-v' || arg === '--version') {
      options.version = true;
    } else if (arg === '-V' || arg === '--verbose') {
      options.verbose = true;
    } else if (arg === '--list') {
      options.list = true;
    } else if (arg === '--full') {
      options.full = true;
    } else if (arg === '--outputs-only') {
      options.outputsOnly = true;
    } else if (arg === '--claude-home') {
      if (i + 1 < args.length && !args[i + 1].startsWith('-')) {
        options.claudeHome = args[++i];
      } else {
        console.error('Error: --claude-home requires a directory path');
        process.exit(1);
      }
    } else if (!arg.startsWith('-')) {
      positionalArgs.push(arg);
    }
  }

  // Assign positional arguments
  if (positionalArgs.length > 0) {
    options.projectPath = positionalArgs[0];
  }
  if (positionalArgs.length > 1) {
    options.outputDir = positionalArgs[1];
  }

  return options;
}

function main() {
  const args = process.argv.slice(2);
  const options = parseArgs(args);

  if (options.help) {
    console.log(HELP_TEXT);
    process.exit(0);
  }

  if (options.version) {
    console.log(`claude-code-exporter v${ClaudePromptExporter.getVersion()}`);
    process.exit(0);
  }

  // Validate mutually exclusive options
  if (options.full && options.outputsOnly) {
    console.error('Error: --full and --outputs-only cannot be used together');
    process.exit(1);
  }

  // Determine export mode
  let exportMode = ClaudePromptExporter.ExportMode.PROMPTS_ONLY;
  if (options.full) {
    exportMode = ClaudePromptExporter.ExportMode.FULL_CONVERSATION;
  } else if (options.outputsOnly) {
    exportMode = ClaudePromptExporter.ExportMode.OUTPUTS_ONLY;
  }

  const modeText = {
    [ClaudePromptExporter.ExportMode.PROMPTS_ONLY]: 'User Prompts',
    [ClaudePromptExporter.ExportMode.FULL_CONVERSATION]: 'Full Conversations',
    [ClaudePromptExporter.ExportMode.OUTPUTS_ONLY]: 'Assistant Outputs'
  }[exportMode];

  console.log(`Claude Session Exporter (${modeText})\n`);

  try {
    // Resolve paths
    const projectPath = path.resolve(options.projectPath);
    const outputDir = path.resolve(options.outputDir);

    // Validate project path exists
    if (!fs.existsSync(projectPath)) {
      throw new Error(`Project path does not exist: ${projectPath}`);
    }

    console.log(`Project: ${projectPath}`);
    
    const exporter = new ClaudePromptExporter(projectPath, { 
      verbose: options.verbose,
      claudeHome: options.claudeHome,
      exportMode: exportMode
    });

    if (options.list) {
      // List mode - just show available sessions
      const sessions = exporter.extractMessages();
      const itemName = exportMode === ClaudePromptExporter.ExportMode.OUTPUTS_ONLY ? 'output' : 
                       exportMode === ClaudePromptExporter.ExportMode.FULL_CONVERSATION ? 'message' : 'prompt';
      console.log(`\nFound ${sessions.length} session(s) with ${itemName}s:\n`);
      
      sessions.forEach(({ sessionId, messages, stats }) => {
        const firstMessage = messages[0].content.split('\n')[0].slice(0, 60) + '...';
        console.log(`  ${sessionId}`);
        
        if (exportMode === ClaudePromptExporter.ExportMode.FULL_CONVERSATION) {
          console.log(`    Messages: ${messages.length} (${stats.userMessages} user, ${stats.assistantMessages} assistant)`);
        } else {
          console.log(`    ${itemName.charAt(0).toUpperCase() + itemName.slice(1)}s: ${messages.length}`);
        }
        
        console.log(`    First: "${firstMessage}"`);
        console.log();
      });
    } else {
      // Export mode
      console.log(`Output:  ${outputDir}\n`);
      const result = exporter.exportToMarkdown(outputDir);
      
      if (result.sessionsExported === 0) {
        console.log('\nNo sessions found to export.');
      }
    }

  } catch (error) {
    console.error(`\nError: ${error.message}`);
    
    if (options.verbose && error.stack) {
      console.error('\nStack trace:');
      console.error(error.stack);
    }
    
    process.exit(1);
  }
}

// Run the CLI
main();
